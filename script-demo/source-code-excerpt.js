/*
 * @Author: taojinchao
 * @Date: 2025-05-14 20:20:36
 * @LastEditors: taojinchao
 * @LastEditTime: 2025-05-14 21:15:09
 * @Description: 从源码中提取出指定行数的源码
 */
const yuanmaBody = {
  bizTreeName: "kingfisher-analyze-container",
  programBuildVersion: "20250514161642.wangyifan.f1566b04.169.tjc-20250514",
  list: [
    {
      originalLine: 120,
      originalColumn: 10,
      originalPath: "../../src/components/ErrorPage.vue",
      originalName: null,
      originalSource:
        '<template>\n  <div class="error-page">\n    <div class="error-section">\n      <h2>JavaScript 错误示例</h2>\n      <div class="error-buttons">\n        <button @click="triggerSyntaxError" class="error-btn">\n          SyntaxError\n        </button>\n        <button @click="triggerReferenceError" class="error-btn">\n          ReferenceError\n        </button>\n        <button @click="triggerTypeError" class="error-btn">TypeError</button>\n        <button @click="triggerRangeError" class="error-btn">RangeError</button>\n      </div>\n    </div>\n\n    <div class="error-section">\n      <h2>网络错误示例</h2>\n      <div class="error-buttons">\n        <button @click="triggerClientError" class="error-btn">\n          客户端错误 (404)\n        </button>\n        <button @click="triggerServerError" class="error-btn">\n          服务器错误 (500)\n        </button>\n        <button @click="triggerNetworkConnectionError" class="error-btn">\n          网络连接错误\n        </button>\n        <button @click="triggerBlockedRequest" class="error-btn">\n          请求被阻止\n        </button>\n        <button @click="triggerParseError" class="error-btn">\n          数据解析错误\n        </button>\n      </div>\n    </div>\n    <div class="error-section">\n      <h2>主动上报</h2>\n      <div class="error-buttons">\n        <button @click="reportFrameFn" class="error-btn">主动上报异常</button>\n        <button @click="reportTti" class="error-btn">主动上报性能-tti</button>\n        <button @click="reportLcp" class="error-btn">主动上报性能-lcp</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang="ts">\n// 声明全局 ClientMonitor 接口\ndeclare global {\n  interface Window {\n    ClientMonitor: {\n      reportFrameErrors: (context: any, error: Error) => void;\n      setPerformanceData: (context: any, data: any) => void;\n    };\n  }\n}\n\n// SyntaxError: 语法错误示例\nconst triggerSyntaxError = () => {\n  // 语法错误的代码：缺少右括号\n  eval("function test() { console.log(\'test\'");\n};\n\n// ReferenceError: 引用未定义变量示例\nconst triggerReferenceError = () => {\n  // 引用一个未定义的变量\n  // @ts-ignore - 故意触发 ReferenceError\n  console.log(nonExistentVariable);\n};\n\n// TypeError: 类型错误示例\nconst triggerTypeError = () => {\n  // 尝试调用一个数字的方法\n  const num = 123;\n  // @ts-ignore - 故意触发 TypeError\n  num.toUpperCase();\n};\n\n// RangeError: 数值越界示例\nconst triggerRangeError = () => {\n  // 创建一个超出最大长度的数组\n  new Array(-1);\n};\n\n// 客户端错误示例 (404 Not Found)\nconst triggerClientError = async () => {\n  const response = await fetch("https://api.example.com/nonexistent");\n  if (!response.ok) {\n    throw new Error(`客户端错误: ${response.status} ${response.statusText}`);\n  }\n};\n\n// 服务器错误示例 (500 Internal Server Error)\nconst triggerServerError = async () => {\n  const response = await fetch("https://httpstat.us/500");\n  if (!response.ok) {\n    throw new Error(`服务器错误: ${response.status} ${response.statusText}`);\n  }\n};\n\n// 网络连接错误示例\nconst triggerNetworkConnectionError = async () => {\n  try {\n    // 尝试连接到一个不存在的域名\n    await fetch("https://this-domain-does-not-exist.example");\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      throw new Error(`网络连接错误: ${error.message}`);\n    }\n    throw new Error("未知网络错误");\n  }\n};\n\n// 请求被阻止示例\nconst triggerBlockedRequest = async () => {\n  try {\n    // 尝试访问一个被 CORS 策略阻止的 API\n    await fetch("https://api.example.com/data", {\n      mode: "cors",\n      headers: {\n        Origin: "https://different-origin.com",\n      },\n    });\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      throw new Error(`请求被阻止: ${error.message}`);\n    }\n    throw new Error("未知请求错误");\n  }\n};\n\n// 数据解析错误示例\nconst triggerParseError = async () => {\n  try {\n    const response = await fetch("https://api.example.com/invalid-json");\n    const text = await response.text();\n    // 尝试解析无效的 JSON 数据\n    JSON.parse(text);\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      throw new Error(`数据解析错误: ${error.message}`);\n    }\n    throw new Error("未知解析错误");\n  }\n};\n\nconst reportFrameFn = () => {\n  try {\n    throw new Error("我是主动抛出的异常, 设置 1s 后上报");\n  } catch (err) {\n    console.log(err);\n    window.ClientMonitor.reportFrameErrors(\n      {\n        category: "ajax",\n        content: "我是上下文信息",\n        level: 1,\n      },\n      err as Error\n    );\n  }\n};\n\nconst reportTti = () => {\n  window.ClientMonitor.setPerformanceData({}, { ttiTime: 54321 });\n};\n\nconst reportLcp = () => {\n  window.ClientMonitor.setPerformanceData({}, { lcpTime: 1234 });\n};\n</script>\n\n<style scoped>\n.error-page {\n  padding: 2rem;\n  text-align: center;\n}\n\n.error-section {\n  margin-bottom: 3rem;\n  padding: 2rem;\n  border: 1px solid #eee;\n  border-radius: 8px;\n  background-color: #fafafa;\n}\n\n.error-section h2 {\n  margin-bottom: 1.5rem;\n  color: #333;\n}\n\n.error-buttons {\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.error-btn {\n  padding: 0.5rem 1rem;\n  background-color: #ff4444;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.error-btn:hover {\n  background-color: #cc0000;\n}\n</style>\n',
    },
    {
      originalLine: 150,
      originalColumn: 10,
      originalPath: "../../src/components/ErrorPage.vue",
      originalName: null,
      originalSource:
        '<template>\n  <div class="error-page">\n    <div class="error-section">\n      <h2>JavaScript 错误示例</h2>\n      <div class="error-buttons">\n        <button @click="triggerSyntaxError" class="error-btn">\n          SyntaxError\n        </button>\n        <button @click="triggerReferenceError" class="error-btn">\n          ReferenceError\n        </button>\n        <button @click="triggerTypeError" class="error-btn">TypeError</button>\n        <button @click="triggerRangeError" class="error-btn">RangeError</button>\n      </div>\n    </div>\n\n    <div class="error-section">\n      <h2>网络错误示例</h2>\n      <div class="error-buttons">\n        <button @click="triggerClientError" class="error-btn">\n          客户端错误 (404)\n        </button>\n        <button @click="triggerServerError" class="error-btn">\n          服务器错误 (500)\n        </button>\n        <button @click="triggerNetworkConnectionError" class="error-btn">\n          网络连接错误\n        </button>\n        <button @click="triggerBlockedRequest" class="error-btn">\n          请求被阻止\n        </button>\n        <button @click="triggerParseError" class="error-btn">\n          数据解析错误\n        </button>\n      </div>\n    </div>\n    <div class="error-section">\n      <h2>主动上报</h2>\n      <div class="error-buttons">\n        <button @click="reportFrameFn" class="error-btn">主动上报异常</button>\n        <button @click="reportTti" class="error-btn">主动上报性能-tti</button>\n        <button @click="reportLcp" class="error-btn">主动上报性能-lcp</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang="ts">\n// 声明全局 ClientMonitor 接口\ndeclare global {\n  interface Window {\n    ClientMonitor: {\n      reportFrameErrors: (context: any, error: Error) => void;\n      setPerformanceData: (context: any, data: any) => void;\n    };\n  }\n}\n\n// SyntaxError: 语法错误示例\nconst triggerSyntaxError = () => {\n  // 语法错误的代码：缺少右括号\n  eval("function test() { console.log(\'test\'");\n};\n\n// ReferenceError: 引用未定义变量示例\nconst triggerReferenceError = () => {\n  // 引用一个未定义的变量\n  // @ts-ignore - 故意触发 ReferenceError\n  console.log(nonExistentVariable);\n};\n\n// TypeError: 类型错误示例\nconst triggerTypeError = () => {\n  // 尝试调用一个数字的方法\n  const num = 123;\n  // @ts-ignore - 故意触发 TypeError\n  num.toUpperCase();\n};\n\n// RangeError: 数值越界示例\nconst triggerRangeError = () => {\n  // 创建一个超出最大长度的数组\n  new Array(-1);\n};\n\n// 客户端错误示例 (404 Not Found)\nconst triggerClientError = async () => {\n  const response = await fetch("https://api.example.com/nonexistent");\n  if (!response.ok) {\n    throw new Error(`客户端错误: ${response.status} ${response.statusText}`);\n  }\n};\n\n// 服务器错误示例 (500 Internal Server Error)\nconst triggerServerError = async () => {\n  const response = await fetch("https://httpstat.us/500");\n  if (!response.ok) {\n    throw new Error(`服务器错误: ${response.status} ${response.statusText}`);\n  }\n};\n\n// 网络连接错误示例\nconst triggerNetworkConnectionError = async () => {\n  try {\n    // 尝试连接到一个不存在的域名\n    await fetch("https://this-domain-does-not-exist.example");\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      throw new Error(`网络连接错误: ${error.message}`);\n    }\n    throw new Error("未知网络错误");\n  }\n};\n\n// 请求被阻止示例\nconst triggerBlockedRequest = async () => {\n  try {\n    // 尝试访问一个被 CORS 策略阻止的 API\n    await fetch("https://api.example.com/data", {\n      mode: "cors",\n      headers: {\n        Origin: "https://different-origin.com",\n      },\n    });\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      throw new Error(`请求被阻止: ${error.message}`);\n    }\n    throw new Error("未知请求错误");\n  }\n};\n\n// 数据解析错误示例\nconst triggerParseError = async () => {\n  try {\n    const response = await fetch("https://api.example.com/invalid-json");\n    const text = await response.text();\n    // 尝试解析无效的 JSON 数据\n    JSON.parse(text);\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      throw new Error(`数据解析错误: ${error.message}`);\n    }\n    throw new Error("未知解析错误");\n  }\n};\n\nconst reportFrameFn = () => {\n  try {\n    throw new Error("我是主动抛出的异常, 设置 1s 后上报");\n  } catch (err) {\n    console.log(err);\n    window.ClientMonitor.reportFrameErrors(\n      {\n        category: "ajax",\n        content: "我是上下文信息",\n        level: 1,\n      },\n      err as Error\n    );\n  }\n};\n\nconst reportTti = () => {\n  window.ClientMonitor.setPerformanceData({}, { ttiTime: 54321 });\n};\n\nconst reportLcp = () => {\n  window.ClientMonitor.setPerformanceData({}, { lcpTime: 1234 });\n};\n</script>\n\n<style scoped>\n.error-page {\n  padding: 2rem;\n  text-align: center;\n}\n\n.error-section {\n  margin-bottom: 3rem;\n  padding: 2rem;\n  border: 1px solid #eee;\n  border-radius: 8px;\n  background-color: #fafafa;\n}\n\n.error-section h2 {\n  margin-bottom: 1.5rem;\n  color: #333;\n}\n\n.error-buttons {\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.error-btn {\n  padding: 0.5rem 1rem;\n  background-color: #ff4444;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.error-btn:hover {\n  background-color: #cc0000;\n}\n</style>\n',
    },
  ],
};

// 假设 yuanmaBody 已经定义
function extractSourceByLine(source, line, context = 20) {
  const lines = source.split("\n");
  const start = Math.max(0, line - context - 1);
  const end = Math.min(lines.length, line + context);
  return lines.slice(start, end).join("\n");
}

yuanmaBody.list.forEach((item) => {
  if (item.originalSource) {
    item.originalSource = extractSourceByLine(
      item.originalSource,
      item.originalLine,
      20
    );
  }
});

// 你可以输出结果看看
console.log(JSON.stringify(yuanmaBody, null, 2));
